{
  "hash": "2c0e9b23a88c51e5aaddb6201767276a",
  "result": {
    "markdown": "---\ntitle: \"Stats on e5 genomes\"\ndescription: \"welcoming new pulcra\"\ncategories: [e5]\n#citation: \ndate: 10-05-2024\nimage: http://gannet.fish.washington.edu/seashell/snaps/2024-10-05_13-39-55.png # finding a good image\n\nauthor:\n  - name: Steven Roberts\n    url: \n    orcid: 0000-0001-8302-1138\n    affiliation: Professor, UW - School of Aquatic and Fishery Sciences\n    affiliation-url: https://robertslab.info\n  #url:  # self-defined\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nformat:\n  html:\n    code-fold: FALSE\n    code-tools: true\n    code-copy: true\n    highlight-style: github\n    code-overflow: wrap\n---\n\n\n\n\nAs part of the **e5 project**, our team is delving into the genomic intricacies of three coral species to better understand their adaptability and resilience in changing marine environments. Today, I focused on performing fundamental genomic analyses using a custom Bash script, allowing for efficient processing of large genome files directly from the command line.\n\n## Introduction\n\nCoral reefs are biodiversity hotspots and play a critical role in marine ecosystems. Deciphering their genomic information is essential for conservation and understanding their responses to environmental stressors like climate change and ocean acidification. By analyzing genomic data, we can identify genetic factors that contribute to coral health, stress responses, and adaptability.\n\n## Methods\n\nTo extract essential genomic statistics from the coral genome files, I employed a Bash script that parses FASTA files. This approach leverages command-line tools and scripting to handle large datasets efficiently without the overhead of loading data into memory-intensive applications.\n\n### Bash Script for Genome Statistics\n\nBelow is the Bash script used to calculate key genomic statistics:\n\n``` bash\n#!/bin/bash\n\n# Check if input file is provided\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 genome.fasta\"\n    exit 1\nfi\n\nfasta_file=\"$1\"\n\n# Number of sequences\nnum_seqs=$(grep -c '^>' \"$fasta_file\")\necho \"Number of sequences: $num_seqs\"\n\n# Get sequence lengths\nawk '\n    /^>/ { if (seqlen) { print seqlen; seqlen=0 } next }\n    { seqlen += length($0) }\n    END { if (seqlen) print seqlen }\n' \"$fasta_file\" > seq_lengths.txt\n\n# Total length\ntotal_length=$(awk '{sum+=$1} END{print sum}' seq_lengths.txt)\necho \"Total length: $total_length\"\n\n# Longest sequence\nlongest=$(sort -nr seq_lengths.txt | head -n1)\necho \"Longest sequence length: $longest\"\n\n# Shortest sequence\nshortest=$(sort -n seq_lengths.txt | head -n1)\necho \"Shortest sequence length: $shortest\"\n\n# N50 calculation\nsort -nr seq_lengths.txt > seq_lengths_sorted.txt\n\nn50=$(awk -v total_length=\"$total_length\" '\nBEGIN { half_total = total_length / 2; sum = 0 }\n{\n    sum += $1\n    if (sum >= half_total) {\n        print $1\n        exit\n    }\n}\n' seq_lengths_sorted.txt)\necho \"N50: $n50\"\n\n# L50 calculation\nl50=$(awk -v total_length=\"$total_length\" '\nBEGIN { half_total = total_length / 2; sum = 0; count = 0 }\n{\n    sum += $1\n    count++\n    if (sum >= half_total) {\n        print count\n        exit\n    }\n}\n' seq_lengths_sorted.txt)\necho \"L50: $l50\"\n\n# GC content and base counts\nawk '\n    /^>/ { next }\n    {\n        seq = toupper($0)\n        g += gsub(/G/, \"\", seq)\n        c += gsub(/C/, \"\", seq)\n        a += gsub(/A/, \"\", seq)\n        t += gsub(/T/, \"\", seq)\n        n += gsub(/N/, \"\", seq)\n    }\n    END {\n        total = a + c + g + t + n\n        gc = g + c\n        printf \"Total bases: %d\\n\", total\n        printf \"A: %d\\n\", a\n        printf \"C: %d\\n\", c\n        printf \"G: %d\\n\", g\n        printf \"T: %d\\n\", t\n        printf \"N: %d\\n\", n\n        printf \"GC Content: %.2f%%\\n\", (gc / total) * 100\n    }\n' \"$fasta_file\"\n\n# Cleanup temporary files\nrm seq_lengths.txt seq_lengths_sorted.txt\n```\n\n### Explanation of the Script\n\n-   **Input Validation:** Checks if a genome FASTA file is provided as an argument.\n-   **Number of Sequences:** Uses `grep` to count the number of header lines (sequences) in the FASTA file.\n-   **Sequence Lengths:** Utilizes `awk` to calculate the length of each sequence and writes them to `seq_lengths.txt`.\n-   **Total Length:** Sums up all sequence lengths using `awk`.\n-   **Longest and Shortest Sequences:** Identifies the longest and shortest sequences by sorting `seq_lengths.txt`.\n-   **N50 and L50 Calculations:**\n    -   **N50:** The sequence length at which 50% of the genome is contained in sequences equal to or larger than this length.\n    -   **L50:** The minimum number of sequences whose lengths sum to at least 50% of the total genome length.\n-   **GC Content and Base Counts:** Counts the occurrences of each nucleotide (A, C, G, T, N) and calculates the GC content percentage.\n-   **Cleanup:** Removes temporary files created during the process.\n\n### How to Run the Script\n\n1.  **Save the Script:** Save the script to a file, e.g., `genome_stats.sh`.\n2.  **Make It Executable:** Run `chmod +x genome_stats.sh` to make the script executable.\n3.  **Execute the Script:** Run `./genome_stats.sh path/to/genome.fasta`.\n\n## Results\n\nAfter running the script on the genome files of the three coral species, the following statistics were obtained:\n\n### Species D : *Acropora pulchra*\n\n``` plaintext\nNumber of sequences: 174\nTotal length: 518313916\nLongest sequence length: 45111900\nShortest sequence length: 6597\nN50: 17861421\nL50: 10\nTotal bases: 518313916\nA: 158272347\nC: 101422742\nG: 100986991\nT: 157631836\nN: 0\nGC Content: 39.05%\n```\n\n### Species E: Porites evermanni\n\n``` plaintext\nNumber of sequences: 8186\nTotal length: 603805388\nLongest sequence length: 1802771\nShortest sequence length: 2001\nN50: 171385\nL50: 935\nTotal bases: 603805388\nA: 171827598\nC: 109822870\nG: 109866618\nT: 171532079\nN: 40756223\nGC Content: 36.38%\n```\n\n### Species F: Pocillopora tuahiniensis\n\n``` plaintext\n```\n\n## Discussion\n\nThe Bash script efficiently processes large genome files to extract key genomic statistics without the need for additional software dependencies. The genomes of the three coral species exhibit similar characteristics:\n\n-   **Genome Size:**\n-   **GC Content:**\n-   **N50 and L50 Values:** Indicate the assembly quality and sequence continuity.\n\n### Significance of N50 and L50\n\n-   **N50:** A higher N50 value suggests longer contiguous sequences, which is desirable for genome assemblies.\n-   **L50:** A lower L50 indicates that fewer sequences are needed to cover 50% of the genome, reflecting better assembly quality.\n\n### Implications for Coral Research\n\n-   **Genome Assembly Quality:** The consistent N50 and L50 values suggest comparable assembly qualities across the species, facilitating comparative genomic studies.\n-   **Genetic Insights:** The similar GC content and nucleotide distributions hint at conserved genomic features that may be crucial for coral survival and adaptation.\n-   **Resource Efficiency:** Utilizing Bash scripts allows for rapid analysis, saving computational resources and time, especially when dealing with multiple large genome files.\n\n## Conclusion\n\nThe custom Bash script proved to be an effective tool for conducting preliminary genomic analyses on the coral species. By extracting fundamental genomic statistics directly from the command line, we can quickly assess genome assembly qualities and make informed decisions for downstream analyses.\n\n## Next Steps\n\n-   **Functional Annotation:** Proceed with annotating the genomes to identify genes and regulatory elements.\n-   **Comparative Analysis:** Perform comparative genomics to identify species-specific adaptations and conserved genes.\n-   **Transcriptome Integration:** Integrate RNA sequencing data to correlate gene expression patterns with genomic features.\n-   **Environmental Correlation:** Study the relationship between genomic features and environmental stress responses.\n\n## Acknowledgments\n\nI extend my gratitude to the e5 project team for their unwavering support and collaboration. Special thanks to the open-source community for providing the tools and resources that make such analyses possible.\n\n## References\n\n-   **FASTA Format Specification:** [NCBI FASTA Format](https://www.ncbi.nlm.nih.gov/blast/fasta.shtml)\n-   **GNU Awk Manual:** [GNU Awk User's Guide](https://www.gnu.org/software/gawk/manual/gawk.html)\n-   **Bash Scripting Tutorial:** [Advanced Bash-Scripting Guide](https://tldp.org/LDP/abs/html/)\n-   **Coral Genomics Resources:** [Reef Genomics](https://reefgenomics.org/)\n\n------------------------------------------------------------------------\n\n*For any questions or suggestions regarding this analysis, please feel free to reach out.*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
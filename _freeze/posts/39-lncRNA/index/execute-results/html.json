{
  "hash": "4e948533319bf98eff3cab0993569a05",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"lncRNA Discovery Pipeline\"\ndescription: \"\"\ncategories: [e5, lncRNA)]\n#citation: \ndate: 02-28-2025\nimage: http://gannet.fish.washington.edu/seashell/snaps/Monosnap_sr320__sr320klone-login03__ssh_klone.hyak.uw.edu__9830_2025-02-20_09-08-29.png # finding a good image\n\nauthor:\n  - name: Steven Roberts\n    url: \n    orcid: 0000-0001-8302-1138\n    affiliation: Professor, UW - School of Aquatic and Fishery Sciences\n    affiliation-url: https://robertslab.info\n  #url:  # self-defined\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nformat:\n  html:\n    code-fold: FALSE\n    code-tools: true\n    code-copy: true\n    highlight-style: github\n    code-overflow: wrap\n---\n\n\n\n\n## Overview\nThis lab notebook documents the process of identifying long non-coding RNAs (lncRNAs) from RNA-seq data. The pipeline includes data acquisition, genome alignment, transcript assembly, filtering, and classification.\n\n## Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  echo = TRUE,         # Display code chunks\n  eval = FALSE,        # Avoid automatic execution\n  warning = FALSE,     # Hide warnings\n  message = FALSE,     # Hide messages\n  fig.width = 6,       # Set default plot width\n  fig.height = 4,      # Set default plot height\n  fig.align = \"center\", # Center align plots\n  comment = \"\"         # Prevents '##' in output\n)\n```\n:::\n\n\n\n\n\n# Variables\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Global R options\nknitr::opts_chunk$set(echo = TRUE)\n\n# Define key paths and tool directories\n \nDATA_DIR <- \"../data/01-lncRNA\"\nOUTPUT_DIR <- \"../output/01-lncRNA\"\nTHREADS <- \"42\"\n  \nFASTQ_SOURCE <- \"https://gannet.fish.washington.edu/Atumefaciens/20230519-E5_coral-fastqc-fastp-multiqc-RNAseq/P_meandrina/trimmed/\"\nFASTQ_SUFFIX <- \"fastq.gz\"\nGENOME_SOURCE <- \"https://owl.fish.washington.edu/halfshell/genomic-databank/Pocillopora_meandrina_HIv1.assembly.fasta\"\n\n\nGTF_SOURCE <- \"https://raw.githubusercontent.com/urol-e5/timeseries_molecular/d5f546705e3df40558eeaa5c18b122c79d2f4453/F-Ptua/data/Pocillopora_meandrina_HIv1.genes-validated.gtf\"\nGFF_SOURCE <- \"https://gannet.fish.washington.edu/seashell/bu-github/deep-dive-expression/F-Ptuh/data/Pocillopora_meandrina_HIv1.genes-validated.gff3\"\n\nGFFPATTERN <- 'class_code \"u\"|class_code \"x\"|class_code \"o\"|class_code \"i\"'\n\n#RAVEN\nHISAT2_DIR <- \"/home/shared/hisat2-2.2.1/\"\nSAMTOOLS_DIR <- \"/home/shared/samtools-1.12/\"\nSTRINGTIE_DIR <- \"/home/shared/stringtie-2.2.1.Linux_x86_64\"\nGFFCOMPARE_DIR <- \"/home/shared/gffcompare-0.12.6.Linux_x86_64\"\nBEDTOOLS_DIR <- \"/home/shared/bedtools2/bin\"\nCPC2_DIR <- \"/home/shared/CPC2_standalone-1.0.1\"\nCONDA_PATH <- \"/opt/anaconda/anaconda3/bin/conda\"\n\n#KLONE\n# HISAT2_DIR <- \"\"\n# SAMTOOLS_DIR <- \"\"\n# STRINGTIE_DIR <- \"\"\n# GFFCOMPARE_DIR <- \"/srlab/programs/gffcompare-0.12.6.Linux_x86_64/\"\n# BEDTOOLS_DIR <- \"\"\n# CPC2_DIR <- \"/srlab/programs/CPC2_standalone-1.0.1/bin/\"\n# CONDA_PATH <- \"\"\n\nGENOME_FASTA <- file.path(DATA_DIR, \"genome.fasta\")\nGENOME_GTF <- file.path(DATA_DIR, \"genome.gtf\")\nGENOME_GFF <- file.path(DATA_DIR, \"genome.gff\")\nFASTQ_DIR <- file.path(DATA_DIR, \"fastq\")\nGENOME_INDEX <- file.path(OUTPUT_DIR, \"genome.index\")\n\n# Export these as environment variables for bash chunks.\nSys.setenv(\n  THREADS = THREADS,\n  DATA_DIR = DATA_DIR,\n  FASTQ_SOURCE = FASTQ_SOURCE,\n  FASTQ_SUFFIX = FASTQ_SUFFIX,\n  OUTPUT_DIR = OUTPUT_DIR,\n  GENOME_SOURCE = GENOME_SOURCE,\n  GTF_SOURCE = GTF_SOURCE,\n  GFF_SOURCE = GFF_SOURCE,\n  HISAT2_DIR = HISAT2_DIR,\n  SAMTOOLS_DIR = SAMTOOLS_DIR,\n  STRINGTIE_DIR = STRINGTIE_DIR,\n  GFFCOMPARE_DIR = GFFCOMPARE_DIR,\n  BEDTOOLS_DIR = BEDTOOLS_DIR,\n  CPC2_DIR = CPC2_DIR,\n  CONDA_PATH = CONDA_PATH,\n  GENOME_FASTA = GENOME_FASTA,\n  GENOME_GTF = GENOME_GTF,\n  GENOME_GFF = GENOME_GFF,\n  FASTQ_DIR = FASTQ_DIR,\n  GENOME_INDEX = GENOME_INDEX\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nmkdir -p \"${DATA_DIR}\"\nmkdir -p \"${OUTPUT_DIR}\"\n```\n:::\n\n\n\n\n\n# Download Genome and Reads for Hisat\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\nwget -nv -r \\\n--no-directories --no-parent \\\n-P ${FASTQ_DIR} \\\n-A \"*${FASTQ_SUFFIX}\" ${FASTQ_SOURCE}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nls ${FASTQ_DIR}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\ncurl -o \"${GENOME_FASTA}\" \"${GENOME_SOURCE}\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\n\ncurl -o \"${GENOME_GTF}\" \"${GTF_SOURCE}\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\n\ncurl -o \"${GENOME_GFF}\" \"${GFF_SOURCE}\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\noutput_fasta=$(head -1 \"${GENOME_FASTA}\")\noutput_gff=$(head -2 \"${GENOME_GFF}\")\noutput_gtf=$(head -1 \"${GENOME_GTF}\")\n\nif [[ \"$output_fasta\" == *html* || \"$output_gff\" == *html* || \"$output_gtf\" == *html* ]]; then\n    echo \"FAIL - FFS you downloaded a HTML not and genome feature file!\"\nelse\n    echo \"$output_fasta\"\n    echo \"$output_gff\"\n    echo \"$output_gtf\"\nfi\n```\n:::\n\n\n\n\n# HISAT\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\"${HISAT2_DIR}hisat2_extract_exons.py\" \"${GENOME_GTF}\" > \"${OUTPUT_DIR}/exon.txt\"\n\n\"${HISAT2_DIR}hisat2_extract_splice_sites.py\" \"${GENOME_GTF}\" > \"${OUTPUT_DIR}/splice_sites.txt\"\n\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\n\"${HISAT2_DIR}hisat2-build\" \\\n  -p \"${THREADS}\" \\\n  \"${GENOME_FASTA}\" \\\n  \"${GENOME_INDEX}\" \\\n  --exon \"${OUTPUT_DIR}/exon.txt\" \\\n  --ss \"${OUTPUT_DIR}/splice_sites.txt\" \\\n  2> \"${OUTPUT_DIR}/hisat2-build_stats.txt\"\n\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n# Loop over every file ending in .fastq.gz that contains \"_R2_\"\nfor r2 in \"${FASTQ_DIR}\"/*_R2_*.\"${FASTQ_SUFFIX}\"; do\n    # Get the basename (filename without path)\n    base=$(basename \"$r2\")\n    \n    # Derive a sample name by taking everything before \"_R2_\"\n    sample=\"${base%%_R2_*}\"\n    \n    # Construct the corresponding R1 filename by replacing \"_R2_\" with \"_R1_\"\n    r1=\"${r2/_R2_/_R1_}\"\n    \n    # Define the output SAM file name using the sample name\n    output=\"${OUTPUT_DIR}/${sample}.sam\"\n    \n    # Run hisat2 with the paired-end files\n    \"${HISAT2_DIR}hisat2\" \\\n      -x \"${GENOME_INDEX}\" \\\n      -p \"${THREADS}\" \\\n      -1 \"$r1\" \\\n      -2 \"$r2\" \\\n      -S \"$output\"\ndone\n```\n:::\n\n\n## convert SAM to BAM\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nfor samfile in \"${OUTPUT_DIR}/${sample}\"*.sam; do\n  bamfile=\"${samfile%.sam}.bam\"\n  sorted_bamfile=\"${samfile%.sam}.sorted.bam\"\n  \n  # Convert SAM to BAM\n  \"${SAMTOOLS_DIR}samtools\" view -bS -@ \"${THREADS}\" \"$samfile\" > \"$bamfile\"\n  \n  # Sort BAM\n  \"${SAMTOOLS_DIR}samtools\" sort -@ \"${THREADS}\" \"$bamfile\" -o \"$sorted_bamfile\"\n  \n  # Index sorted BAM\n  \"${SAMTOOLS_DIR}samtools\" index -@ \"${THREADS}\" \"$sorted_bamfile\"\ndone\n```\n:::\n\n\n\n\n\n\n\n# StringTie\n\nStringTie uses the sorted BAM files to assemble transcripts for each sample, outputting them as GTF (Gene Transfer Format) files. And then merges all individual GTF assemblies into a single merged GTF file. This step extracts transcript information and merges GTFs from all samplesâ€“an important step in creating a canonical list of lncRNAs across all samples included in the pipeline.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nfind \"${OUTPUT_DIR}\" -name \"*sorted.bam\" \\\n| xargs -n 1 basename -s .sorted.bam | xargs -I{} \\\n\"${STRINGTIE_DIR}stringtie\" \\\n-p \"${THREADS}\" \\\n-G \"${GENOME_GFF}\" \\\n-o \"${OUTPUT_DIR}/{}.gtf\" \\\n\"${OUTPUT_DIR}/{}.sorted.bam\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\"${STRINGTIE_DIR}stringtie\" \\\n--merge \\\n-G \"${GENOME_GFF}\" \\\n-o \"${OUTPUT_DIR}/stringtie_merged.gtf\" \\\n\"${OUTPUT_DIR}/\"*.gtf\n```\n:::\n\n\n\n#GFFCOMPARE\n\n![](http://gannet.fish.washington.edu/seashell/snaps/Monosnap_687474703a2f2f67616e6e65742e666973682e77617368696e67746f6e2e6564752f7365617368656c6c2f736e6170732f323032332d31312d30335f30392d3_2024-12-20_04-02-37.png)\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\"${GFFCOMPARE_DIR}gffcompare\" \\\n-r \"${GENOME_GFF}\" \\\n-o \"${OUTPUT_DIR}/gffcompare_merged\" \\\n\"${OUTPUT_DIR}/stringtie_merged.gtf\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nhead -1 \"${OUTPUT_DIR}\"/gffcompare_merged*\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nawk '$3 == \"transcript\" && $1 !~ /^#/' \"${OUTPUT_DIR}/gffcompare_merged.annotated.gtf\" | \\\ngrep -E \"${GFFPATTERN}\" | \\\nawk '($5 - $4 > 199) || ($4 - $5 > 199)' > \"${OUTPUT_DIR}/lncRNA_candidates.gtf\"\n```\n:::\n\n\n\n# Bedtools\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\"${BEDTOOLS_DIR}\"bedtools getfasta \\\n-fi \"${GENOME_FASTA}\" \\\n-bed \"${OUTPUT_DIR}/lncRNA_candidates.gtf\" \\\n-fo \"${OUTPUT_DIR}/lncRNA_candidates.fasta\" \\\n-name -split\n```\n:::\n\n\n\n#CPC2\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\neval \"$(/opt/anaconda/anaconda3/bin/conda shell.bash hook)\"\npython \"${CPC2_DIR}\"CPC2.py \\\n-i \"${OUTPUT_DIR}/lncRNA_candidates.fasta\" \\\n-o \"${OUTPUT_DIR}/CPC2\"\n```\n:::\n\n\n\nFilter\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nawk '$8 == \"noncoding\" {print $1}' \"${OUTPUT_DIR}/CPC2.txt\" > \"${OUTPUT_DIR}/noncoding_transcripts_ids.txt\"\n```\n:::\n\n\n\n\nSubsetting fasta\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n\"${SAMTOOLS_DIR}samtools\" faidx \"${OUTPUT_DIR}/lncRNA_candidates.fasta\" \\\n-r \"${OUTPUT_DIR}/noncoding_transcripts_ids.txt\" \\\n> \"${OUTPUT_DIR}/lncRNA.fasta\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nhead -2 \"${OUTPUT_DIR}/lncRNA.fasta\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\n# Define input and output file paths using the OUTPUT_DIR variable\ninput=\"${OUTPUT_DIR}/noncoding_transcripts_ids.txt\"\noutput=\"${OUTPUT_DIR}/lncRNA.bed\"\n\n# Process each line of the input file\nwhile IFS= read -r line; do\n    # Remove \"transcript::\" from the line\n    line=\"${line//transcript::/}\"\n    \n    # Split the line by ':' to get the chromosome and position string\n    IFS=':' read -r chromosome pos <<< \"$line\"\n    \n    # Split the position string by '-' to separate start and end positions\n    IFS='-' read -r start end <<< \"$pos\"\n    \n    # Convert the start position to 0-based by subtracting 1\n    start=$((start - 1))\n    \n    # Write the chromosome, updated start, and end positions to the output file (tab-separated)\n    printf \"%s\\t%s\\t%s\\n\" \"$chromosome\" \"$start\" \"$end\"\ndone < \"$input\" > \"$output\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nhead -1 \"${OUTPUT_DIR}/lncRNA.gtf\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nawk 'BEGIN{OFS=\"\\t\"; count=1} {printf \"%s\\t.\\tlncRNA\\t%d\\t%d\\t.\\t+\\t.\\tgene_id \\\"lncRNA_%03d\\\";\\n\", $1, $2, $3, count++;}' \"${OUTPUT_DIR}/lncRNA.bed\" \\\n> \"${OUTPUT_DIR}/lncRNA.gtf\"\n```\n:::\n\n\n\n# Summary Table\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\ntf_file=\"${OUTPUT_DIR}/lncRNA.gtf\"\n\nawk '\nBEGIN {\n    total_entries = 0;\n    min_length = 1e9;\n    max_length = 0;\n    sum_length = 0;\n}\n# Skip comment lines\n/^#/ { next }\n{\n    if (NF < 9) next;\n    total_entries++;\n    start = $4;\n    end = $5;\n    gene_length = end - start + 1;\n    if (gene_length < min_length) min_length = gene_length;\n    if (gene_length > max_length) max_length = gene_length;\n    sum_length += gene_length;\n    feature[$3]++;\n    chrom[$1]++;\n    # Use two-argument match() and then extract the gene_id manually.\n    if (match($9, /gene_id \"[^\"]+\"/)) {\n        gene_str = substr($9, RSTART, RLENGTH);\n        # Remove the \"gene_id \" prefix and the quotes.\n        gsub(/gene_id \"/, \"\", gene_str);\n        gsub(/\"/, \"\", gene_str);\n        genes[gene_str] = 1;\n    }\n}\nEND {\n    avg_length = (total_entries > 0) ? sum_length / total_entries : 0;\n    unique_gene_count = 0;\n    for (g in genes)\n        unique_gene_count++;\n    print \"Basic GTF File Statistics:\";\n    print \"--------------------------\";\n    print \"Total entries:      \" total_entries;\n    print \"Unique genes:       \" unique_gene_count;\n    print \"Min gene length:    \" min_length;\n    print \"Max gene length:    \" max_length;\n    printf(\"Average gene length: %.2f\\n\", avg_length);\n    print \"\\nFeature counts:\";\n    for (f in feature) {\n        print \"  \" f \": \" feature[f];\n    }\n    print \"\\nChromosome counts:\";\n    for (c in chrom) {\n        print \"  \" c \": \" chrom[c];\n    }\n}\n' \"$tf_file\"\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}